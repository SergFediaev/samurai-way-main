{"version":3,"file":"static/js/297.441ae3f6.chunk.js","mappings":"0KACA,GAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,0B,mBCQnKA,EAAa,SAACC,GACvB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OAAO,gBAAKC,UAAWC,EAAAA,OAAiB,IAAMA,EAAAA,OAAvC,UAAuD,SAAC,KAAD,CAC1DC,GAAIJ,EADsD,SAC/CD,EAAMM,UCNZC,EAAU,SAACP,GACpB,OAAO,gBAAKG,UAAWC,EAAAA,QAAhB,SAAkCJ,EAAMQ,W,uCCH7CC,GAAcC,EAAAA,EAAAA,GAAiB,IAarC,GAAeC,EAAAA,EAAAA,GAAU,CAACC,KAAM,kBAAhC,EAXuB,SAACZ,GACpB,OAAO,kBAAMa,SAAUb,EAAMc,aAAtB,WACH,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GAAUX,KAAK,iBAAiBY,SAAU,CAACC,EAAAA,EAAUV,QAE3E,0BACI,6C,qGCJNW,EAA6B,SAACC,GAAD,MAAwD,CACvFC,OAAQD,EAAME,KAAKD,S,UCsBvB,GAAeE,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAfoB,SAACJ,GACrB,MAAO,CACHK,YAAaL,EAAMK,gBAIA,SAACC,GACxB,MAAO,CACHC,YAAa,SAACC,GACVF,GAASG,EAAAA,EAAAA,GAAmBD,UDdR,SAAME,GAAiC,IAC7DC,EAD4D,0IAE9D,WACI,MAA+BC,KAAKjC,MAA7BsB,EAAP,EAAOA,OAAWY,GAAlB,YAEA,OAAKZ,GAEE,SAACS,GAAD,UAAeG,KAFF,SAAC,KAAD,CAAU7B,GAAI,eALwB,GAClC8B,EAAAA,WAYhC,OAFuCV,EAAAA,EAAAA,IAAQL,EAARK,CAAoCO,KCQ/E,ECxBuB,SAAChC,GACpB,IAAMqB,EAAQrB,EAAM0B,YAEdU,EAAkBf,EAAMgB,QAAQC,KAAI,SAAAC,GAAM,OAAI,SAACxC,EAAD,CAA4BG,GAAIqC,EAAOrC,GAAII,KAAMiC,EAAOjC,MAAvCiC,EAAOrC,OACtEsC,EAAmBnB,EAAMoB,SAASH,KAAI,SAAA9B,GAAO,OAAI,SAACD,EAAD,CAA0BC,QAASA,EAAQA,SAA7BA,EAAQN,OAM7E,OAAO,iBAAKC,UAAWC,EAAAA,QAAhB,WACH,gBAAKD,UAAWC,EAAAA,aAAhB,SAAuCgC,KACvC,iBAAKjC,UAAWC,EAAAA,SAAhB,WACI,yBAAMoC,KACN,SAAC,EAAD,CAAgB3B,SARF,SAAC6B,GACnB1C,EAAM4B,YAAYc,EAAOb","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__iHSnK\",\"dialogsItems\":\"Dialogs_dialogsItems__fe27f\",\"active\":\"Dialogs_active__fUGUr\",\"messages\":\"Dialogs_messages__xtM19\",\"message\":\"Dialogs_message__cEJEc\"};","import classes from '../Dialogs.module.css'\r\nimport {NavLink} from 'react-router-dom'\r\nimport React from 'react'\r\n\r\ntype DialogItemPropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport const DialogItem = (props: DialogItemPropsType) => {\r\n    let path = '/dialogs/' + props.id\r\n\r\n    return <div className={classes.dialog + ' ' + classes.active}><NavLink\r\n        to={path}>{props.name}</NavLink></div>\r\n}","import classes from '../Dialogs.module.css'\r\nimport React from 'react'\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nexport const Message = (props: MessagePropsType) => {\r\n    return <div className={classes.message}>{props.message}</div>\r\n}","import {Field, reduxForm} from 'redux-form'\r\nimport {Textarea} from '../../common/FormsControls/FormsControls'\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators'\r\nimport React from 'react'\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm = (props: any) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field component={Textarea} name=\"newMessageBody\" validate={[required, maxLength50]}/>\r\n        </div>\r\n        <div>\r\n            <button>Send</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nexport default reduxForm({form: 'addMessageForm'})(AddMessageForm)","import {Redirect} from 'react-router-dom'\r\nimport React, {ComponentType} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {AppStoreType} from '../redux/redux-store'\r\n\r\ntype MapStatePropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStoreType): MapStatePropsForRedirectType => ({\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport const withAuthRedirect = <T, >(Component: ComponentType<T>) => {\r\n    class RedirectComponent extends React.Component<MapStatePropsForRedirectType> {\r\n        render() {\r\n            const {isAuth, ...restProps} = this.props\r\n\r\n            if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n            return <Component {...restProps as T}/>\r\n        }\r\n    }\r\n\r\n    const ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","import {Dialogs} from './Dialogs'\r\nimport {connect} from 'react-redux'\r\nimport {AppStoreType} from '../../redux/redux-store'\r\nimport {compose, Dispatch} from 'redux'\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect'\r\nimport {ComponentType} from 'react'\r\nimport {DialogsPageType, sendMessageCreator} from '../../redux/dialogs-reducer'\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogsPageType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\nexport type DialogsPagePropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStoreType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        },\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect,\r\n)(Dialogs)\r\n\r\n// const AuthRedirectComponent = withAuthRedirect(Dialogs)\r\n\r\n// export const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent)","import React from 'react'\r\nimport classes from './Dialogs.module.css'\r\nimport {DialogItem} from './DialogItem/DialogItem'\r\nimport {Message} from './Message/Message'\r\nimport {DialogsPageType} from '../../redux/dialogs-reducer'\r\nimport {DialogsPagePropsType} from './DialogsContainer'\r\nimport AddMessageForm from './AddMessageForm/AddMessageForm'\r\n\r\nexport const Dialogs = (props: DialogsPagePropsType) => {\r\n    const state = props.dialogsPage as DialogsPageType\r\n\r\n    const dialogsElements = state.dialogs.map(dialog => <DialogItem key={dialog.id} id={dialog.id} name={dialog.name}/>)\r\n    const messagesElements = state.messages.map(message => <Message key={message.id} message={message.message}/>)\r\n\r\n    const addNewMessage = (values: any) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    return <div className={classes.dialogs}>\r\n        <div className={classes.dialogsItems}>{dialogsElements}</div>\r\n        <div className={classes.messages}>\r\n            <div>{messagesElements}</div>\r\n            <AddMessageForm onSubmit={addNewMessage}/>\r\n        </div>\r\n    </div>\r\n}"],"names":["DialogItem","props","path","id","className","classes","to","name","Message","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","mapStateToPropsForRedirect","state","isAuth","auth","compose","connect","dialogsPage","dispatch","sendMessage","newMessageBody","sendMessageCreator","Component","RedirectComponent","this","restProps","React","dialogsElements","dialogs","map","dialog","messagesElements","messages","values"],"sourceRoot":""}