{"version":3,"file":"static/js/114.3c0cc82a.chunk.js","mappings":"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","sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/Posts/Posts.module.css?138f","webpack://samurai-way/./src/components/Profile/Posts/Post/Post.module.css?59e2","components/Profile/Posts/Post/Post.tsx","components/Profile/Posts/MyPosts.tsx","components/Profile/Posts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__70nUW\"};","import React, {ChangeEvent, useEffect, useState} from 'react'\r\n\r\nexport const ProfileStatusWithHooks = (props: any) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n    }\r\n\r\n    const onStatusChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(event.currentTarget.value)\r\n    }\r\n\r\n    return <div>\r\n        {!editMode && <div>\r\n            <span onDoubleClick={activateEditMode}>{status || '---------'}</span>\r\n        </div>}\r\n        {editMode && <div>\r\n            <input onChange={onStatusChange} autoFocus onBlur={deactivateEditMode} value={status}/>\r\n        </div>}\r\n    </div>\r\n}","import React from 'react'\r\nimport s from './ProfileInfo.module.css'\r\nimport {Preloader} from '../../common/Preloader/Preloader'\r\nimport {ProfileStatusWithHooks} from './ProfileStatusWithHooks'\r\n\r\nexport const ProfileInfo = ({profile, status, updateStatus}: any) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (<div>\r\n        <div className={s.descriptionBlock}>\r\n            <img src={profile.photos.large} alt=\"Large profile photo\"/>\r\n            <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n        </div>\r\n    </div>)\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"Posts_postsBlock__IWtKM\",\"posts\":\"Posts_posts__ajylT\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__ZxQRY\"};","import React from 'react'\r\nimport classes from './Post.module.css'\r\n\r\nexport type PostPropsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport const Post = (props: PostPropsType) => {\r\n    return <div className={classes.item}><img\r\n        src=\"https://asset.kompas.com/crops/-QSHMGMmRvrDcDZeZbRh0wrk4NM=/0x81:466x391/750x500/data/photo/2023/11/09/654c73dbe7559.jpg\"\r\n        alt=\"Avatar\"/>{props.message}\r\n        <div><span>Like</span></div>\r\n        <div>Likes: {props.likesCount}</div>\r\n    </div>\r\n}","import React, {memo} from 'react'\r\nimport classes from './Posts.module.css'\r\nimport {Post} from './Post/Post'\r\nimport {MyPostsPagePropsType} from './MyPostsContainer'\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form'\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators'\r\nimport {Textarea} from '../../common/FormsControls/FormsControls'\r\n\r\ntype FormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nlet AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = props => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field name=\"newPostText\" component={Textarea} validate={[required, maxLength10]}\r\n                   placeholder={'Post message'}/>\r\n        </div>\r\n        <div>\r\n            <button>Remove</button>\r\n            <button>Add post</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nlet AddNewPostFormRedux = reduxForm<FormDataType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\r\n\r\n// @ts-ignore\r\n// window.props = []\r\n\r\nexport const MyPosts = memo((props: MyPostsPagePropsType) => {\r\n    // @ts-ignore\r\n    // window.props.push(props)\r\n    // console.log('MyPosts render')\r\n    // console.log('MyPosts props: ', props)\r\n\r\n    const postsElements = props.posts.map(post => <Post key={post.id}\r\n                                                        id={post.id}\r\n                                                        message={post.message}\r\n                                                        likesCount={post.likesCount}/>)\r\n    const onAddPost = (values: FormDataType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return <div className={classes.postsBlock}>\r\n        <h3>My posts</h3>\r\n        <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n        <div className={classes.posts}>{postsElements}</div>\r\n    </div>\r\n})\r\n\r\n/*\r\nexport class MyPosts extends React.PureComponent<MyPostsPagePropsType> {\r\n    /!*    componentDidUpdate(prevProps: Readonly<MyPostsPagePropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n            console.log('MyPosts componentDidUpdate()')\r\n        }*!/\r\n\r\n    shouldComponentUpdate(nextProps: Readonly<MyPostsPagePropsType>, nextState: Readonly<{}>, nextContext: any): boolean {\r\n        return nextProps !== this.props || nextState !== this.state\r\n    }\r\n\r\n    render() {\r\n        // @ts-ignore\r\n        window.props.push(this.props)\r\n        console.log('MyPosts render')\r\n        console.log('MyPosts props: ', this.props)\r\n        const postsElements = this.props.posts.map(post => <Post key={post.id}\r\n                                                                 id={post.id}\r\n                                                                 message={post.message}\r\n                                                                 likesCount={post.likesCount}/>)\r\n        const onAddPost = (values: FormDataType) => {\r\n            this.props.addPost(values.newPostText)\r\n        }\r\n\r\n        return <div className={classes.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={classes.posts}>{postsElements}</div>\r\n        </div>\r\n    }\r\n}*/","import {MyPosts} from './MyPosts'\r\nimport {connect} from 'react-redux'\r\nimport {AppStoreType} from '../../../redux/redux-store'\r\nimport {PostPropsType} from './Post/Post'\r\nimport {Dispatch} from 'redux'\r\nimport {addPostActionCreator} from '../../../redux/profile-reducer'\r\n\r\ntype MapStateToPropsType = {\r\n    posts: PostPropsType[]\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nexport type MyPostsPagePropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStoreType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        },\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from 'react'\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo'\r\nimport {MyPostsContainer} from './Posts/MyPostsContainer'\r\n\r\nexport const Profile = (props: any) => {\r\n    // console.log('Profile render')\r\n\r\n    return <div>\r\n        <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n        <MyPostsContainer/>\r\n    </div>\r\n}","import React, {ComponentType} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {getStatus, getUserProfile, updateStatus} from '../../redux/profile-reducer'\r\nimport {Profile} from './Profile'\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom'\r\nimport {AppStoreType} from '../../redux/redux-store'\r\nimport {compose} from 'redux'\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: any\r\n    status: any\r\n    authorizedUserId: any\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (userId: string) => void\r\n}\r\n\r\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n\r\n        this.props.getUserProfile(userId)\r\n        // setTimeout(() => {\r\n        this.props.getStatus(userId)\r\n        // }, 1_000)\r\n    }\r\n\r\n    render() {\r\n        return <Profile {...this.props} profile={this.props.profile} status={this.props.status}\r\n                        updateStatus={this.props.updateStatus}/>\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStoreType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    // withAuthRedirect,\r\n)(ProfileContainer)\r\n\r\n// const AuthRedirectComponent = withAuthRedirect(ProfileContainer)\r\n\r\n// const WithUrlDataContainerComponent = withRouter(ProfileContainer)\r\n\r\n// export default withAuthRedirect(connect(mapStateToProps, {getUserProfile})(WithUrlDataContainerComponent))"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","event","currentTarget","value","autoFocus","onBlur","ProfileInfo","profile","updateStatus","className","s","src","photos","large","alt","Preloader","Post","classes","message","likesCount","maxLength10","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","name","component","Textarea","validate","required","placeholder","MyPosts","memo","postsElements","posts","map","post","id","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","React","compose","auth","isAuth","withRouter"],"sourceRoot":""}