{"version":3,"file":"static/js/201.b0aedc28.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/Posts/Posts.module.css?138f","webpack://samurai-way/./src/components/Profile/Posts/Post/Post.module.css?59e2","components/Profile/Posts/Post/Post.tsx","components/Profile/Posts/MyPosts.tsx","components/Profile/Posts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__70nUW\",\"mainPhoto\":\"ProfileInfo_mainPhoto__YbjuG\",\"contact\":\"ProfileInfo_contact__99k4s\"};","import React, {ChangeEvent, useEffect, useState} from 'react'\r\n\r\nexport const ProfileStatusWithHooks = (props: any) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(event.currentTarget.value)\r\n    }\r\n\r\n    return <div>\r\n        {!editMode && <div>\r\n            <b>Status: </b> <span onDoubleClick={activateEditMode}>{status || '---------'}</span>\r\n        </div>}\r\n        {editMode && <div>\r\n            <input onChange={onStatusChange} autoFocus onBlur={deactivateEditMode} value={status}/>\r\n        </div>}\r\n    </div>\r\n}","import React from 'react'\r\nimport {createField, Input, Textarea} from '../../common/FormsControls/FormsControls'\r\nimport {reduxForm} from 'redux-form'\r\nimport s from './ProfileInfo.module.css'\r\nimport style from '../../common/FormsControls/FormsControls.module.css'\r\n\r\nconst ProfileDataForm = ({handleSubmit, profile, error}: any) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div>\r\n            <button>Save</button>\r\n        </div>\r\n        {error && <div className={style.formSummaryError}>{error}</div>}\r\n        <div>\r\n            <b>Full name</b>: {createField('Full name', 'fullName', [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {createField('', 'lookingForAJob', [], Input, {type: 'checkbox'})}\r\n        </div>\r\n        <div>\r\n            <b>My professional\r\n                skills</b>: {createField('My professional skills', 'lookingForAJobDescription', [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>About me</b>: {createField('About me', 'aboutMe', [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => <div key={key} className={s.contact}>\r\n            <b>{key}: {createField(key, 'contacts.' + key, [], Input)}</b>\r\n        </div>)}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm","import React, {ChangeEvent, useState} from 'react'\r\nimport s from './ProfileInfo.module.css'\r\nimport {Preloader} from '../../common/Preloader/Preloader'\r\nimport {ProfileStatusWithHooks} from './ProfileStatusWithHooks'\r\nimport userPhoto from '../../../assets/images/user.png'\r\nimport ProfileDataForm from './ProfileDataForm'\r\n\r\nexport const ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}: any) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (event: ChangeEvent<HTMLInputElement>) => {\r\n        if (event.currentTarget.files?.length) {\r\n            savePhoto(event.currentTarget.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: any) => {\r\n        saveProfile(formData).then(() => {\r\n            setEditMode(false)\r\n        })\r\n    }\r\n\r\n    return (<div>\r\n        <div className={s.descriptionBlock}>\r\n            <img src={profile.photos.large || userPhoto} alt=\"Large profile photo\" className={s.mainPhoto}/>\r\n            {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n            {editMode\r\n                // @ts-ignore\r\n                ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => setEditMode(true)}/>}\r\n            <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n        </div>\r\n    </div>)\r\n}\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}: any) => {\r\n    return <div>\r\n        {isOwner && <div>\r\n            <button onClick={goToEditMode}>Edit</button>\r\n        </div>}\r\n        <div>\r\n            <b>Full name</b>: {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {profile.lookingForAJob ? 'yes' : 'no'}\r\n        </div>\r\n        {profile.lookingForAJob && <div>\r\n            <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n        </div>}\r\n        <div>\r\n            <b>About me</b>: {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => <Contact key={key} contactTitle={key}\r\n                                                                                contactValue={profile.contacts[key]}/>)}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nconst Contact = ({contactTitle, contactValue}: any) => {\r\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"Posts_postsBlock__IWtKM\",\"posts\":\"Posts_posts__ajylT\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__ZxQRY\"};","import React from 'react'\r\nimport classes from './Post.module.css'\r\n\r\nexport type PostPropsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport const Post = (props: PostPropsType) => {\r\n    return <div className={classes.item}><img\r\n        src=\"https://asset.kompas.com/crops/-QSHMGMmRvrDcDZeZbRh0wrk4NM=/0x81:466x391/750x500/data/photo/2023/11/09/654c73dbe7559.jpg\"\r\n        alt=\"Avatar\"/>{props.message}\r\n        <div><span>Like</span></div>\r\n        <div>Likes: {props.likesCount}</div>\r\n    </div>\r\n}","import React, {memo} from 'react'\r\nimport classes from './Posts.module.css'\r\nimport {Post} from './Post/Post'\r\nimport {MyPostsPagePropsType} from './MyPostsContainer'\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form'\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators'\r\nimport {Textarea} from '../../common/FormsControls/FormsControls'\r\n\r\ntype FormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nlet AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = props => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field name=\"newPostText\" component={Textarea} validate={[required, maxLength10]}\r\n                   placeholder={'Post message'}/>\r\n        </div>\r\n        <div>\r\n            <button>Remove</button>\r\n            <button>Add post</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nlet AddNewPostFormRedux = reduxForm<FormDataType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\r\n\r\n// @ts-ignore\r\n// window.props = []\r\n\r\nexport const MyPosts = memo((props: MyPostsPagePropsType) => {\r\n    // @ts-ignore\r\n    // window.props.push(props)\r\n    // console.log('MyPosts render')\r\n    // console.log('MyPosts props: ', props)\r\n\r\n    const postsElements = props.posts.map(post => <Post key={post.id}\r\n                                                        id={post.id}\r\n                                                        message={post.message}\r\n                                                        likesCount={post.likesCount}/>)\r\n    const onAddPost = (values: FormDataType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return <div className={classes.postsBlock}>\r\n        <h3>My posts</h3>\r\n        <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n        <div className={classes.posts}>{postsElements}</div>\r\n    </div>\r\n})\r\n\r\n/*\r\nexport class MyPosts extends React.PureComponent<MyPostsPagePropsType> {\r\n    /!*    componentDidUpdate(prevProps: Readonly<MyPostsPagePropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n            console.log('MyPosts componentDidUpdate()')\r\n        }*!/\r\n\r\n    shouldComponentUpdate(nextProps: Readonly<MyPostsPagePropsType>, nextState: Readonly<{}>, nextContext: any): boolean {\r\n        return nextProps !== this.props || nextState !== this.state\r\n    }\r\n\r\n    render() {\r\n        // @ts-ignore\r\n        window.props.push(this.props)\r\n        console.log('MyPosts render')\r\n        console.log('MyPosts props: ', this.props)\r\n        const postsElements = this.props.posts.map(post => <Post key={post.id}\r\n                                                                 id={post.id}\r\n                                                                 message={post.message}\r\n                                                                 likesCount={post.likesCount}/>)\r\n        const onAddPost = (values: FormDataType) => {\r\n            this.props.addPost(values.newPostText)\r\n        }\r\n\r\n        return <div className={classes.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={classes.posts}>{postsElements}</div>\r\n        </div>\r\n    }\r\n}*/","import {MyPosts} from './MyPosts'\r\nimport {connect} from 'react-redux'\r\nimport {AppStoreType} from '../../../redux/redux-store'\r\nimport {PostPropsType} from './Post/Post'\r\nimport {Dispatch} from 'redux'\r\nimport {addPostActionCreator} from '../../../redux/profile-reducer'\r\n\r\ntype MapStateToPropsType = {\r\n    posts: PostPropsType[]\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nexport type MyPostsPagePropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStoreType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        },\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from 'react'\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo'\r\nimport {MyPostsContainer} from './Posts/MyPostsContainer'\r\n\r\nexport const Profile = (props: any) => {\r\n    // console.log('Profile render')\r\n\r\n    return <div>\r\n        <ProfileInfo savePhoto={props.savePhoto}\r\n                     isOwner={props.isOwner}\r\n                     profile={props.profile}\r\n                     status={props.status}\r\n                     saveProfile={props.saveProfile}\r\n                     updateStatus={props.updateStatus}/>\r\n        <MyPostsContainer/>\r\n    </div>\r\n}","import React, {ComponentType} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from '../../redux/profile-reducer'\r\nimport {Profile} from './Profile'\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom'\r\nimport {AppStoreType} from '../../redux/redux-store'\r\nimport {compose} from 'redux'\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: any\r\n    status: any\r\n    authorizedUserId: any\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (userId: string) => void\r\n    savePhoto: (photo: string) => void\r\n    saveProfile: (profile: any) => void\r\n}\r\n\r\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <Profile {...this.props}\r\n                        isOwner={!this.props.match.params.userId}\r\n                        profile={this.props.profile}\r\n                        status={this.props.status}\r\n                        updateStatus={this.props.updateStatus}\r\n                        savePhoto={this.props.savePhoto}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStoreType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    // withAuthRedirect,\r\n)(ProfileContainer)\r\n\r\n// const AuthRedirectComponent = withAuthRedirect(ProfileContainer)\r\n\r\n// const WithUrlDataContainerComponent = withRouter(ProfileContainer)\r\n\r\n// export default withAuthRedirect(connect(mapStateToProps, {getUserProfile})(WithUrlDataContainerComponent))"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","event","currentTarget","value","autoFocus","onBlur","updateStatus","reduxForm","form","handleSubmit","profile","error","onSubmit","className","style","createField","Input","type","Textarea","Object","keys","contacts","map","key","s","ProfileInfo","isOwner","savePhoto","saveProfile","Preloader","src","photos","large","userPhoto","alt","files","length","initialValues","formData","then","ProfileData","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","Post","classes","message","likesCount","maxLength10","maxLengthCreator","AddNewPostFormRedux","Field","name","component","validate","required","placeholder","MyPosts","memo","postsElements","posts","post","id","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","React","compose","auth","isAuth","withRouter"],"sourceRoot":""}